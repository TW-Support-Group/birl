warning: leading irrefutable pattern in let chain
   --> src/lexer.rs:157:12
    |
157 |         if let c = self.advance()
    |            ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this pattern will always match
    = help: consider moving it outside of the construct
    = note: `#[warn(irrefutable_let_patterns)]` on by default

warning: field `0` is never read
 --> src/ast.rs:5:10
  |
5 |     Expr(Expr),
  |     ---- ^^^^
  |     |
  |     field in this variant
  |
  = note: `Node` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
  = note: `#[warn(dead_code)]` on by default
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
  |
5 -     Expr(Expr),
5 +     Expr(()),
  |

warning: method `stmts` is never used
 --> src/ast.rs:9:12
  |
8 | impl Node {
  | --------- method in this implementation
9 |     pub fn stmts(&self) -> Option<&Vec<Node>> {
  |            ^^^^^

warning: field `value` is never read
  --> src/ast.rs:20:18
   |
20 |     ReturnStmt { value: Box<Node> },
   |     ----------   ^^^^^
   |     |
   |     field in this variant
   |
   = note: `Stmt` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `0` is never read
  --> src/ast.rs:37:12
   |
37 |     String(String),
   |     ------ ^^^^^^
   |     |
   |     field in this variant
   |
   = note: `Expr` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
37 -     String(String),
37 +     String(()),
   |

warning: field `0` is never read
  --> src/ast.rs:38:12
   |
38 |     Number(f64),
   |     ------ ^^^
   |     |
   |     field in this variant
   |
   = note: `Expr` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
38 -     Number(f64),
38 +     Number(()),
   |

warning: field `0` is never read
  --> src/lexer.rs:16:24
   |
16 |     UnexpectedSequence(String),
   |     ------------------ ^^^^^^
   |     |
   |     field in this variant
   |
   = note: `LexerError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
16 -     UnexpectedSequence(String),
16 +     UnexpectedSequence(()),
   |

warning: field `0` is never read
  --> src/lexer.rs:17:27
   |
17 |     InvalidEscapeSequence(u8),
   |     --------------------- ^^
   |     |
   |     field in this variant
   |
   = note: `LexerError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
17 -     InvalidEscapeSequence(u8),
17 +     InvalidEscapeSequence(()),
   |

warning: field `0` is never read
  --> src/lexer.rs:18:31
   |
18 |     UnterminatedStringLiteral(u8),
   |     ------------------------- ^^
   |     |
   |     field in this variant
   |
   = note: `LexerError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
18 -     UnterminatedStringLiteral(u8),
18 +     UnterminatedStringLiteral(()),
   |

warning: fields `0` and `1` are never read
  --> src/parser.rs:12:21
   |
12 |     UnexpectedToken(Token, Token),
   |     --------------- ^^^^^  ^^^^^
   |     |
   |     fields in this variant
   |
   = note: `ParserError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
help: consider changing the fields to be of unit type to suppress this warning while preserving the field numbering, or remove the fields
   |
12 -     UnexpectedToken(Token, Token),
12 +     UnexpectedToken((), ()),
   |

warning: `birl` (bin "birl") generated 10 warnings
    Finished `release` profile [optimized] target(s) in 0.74s
